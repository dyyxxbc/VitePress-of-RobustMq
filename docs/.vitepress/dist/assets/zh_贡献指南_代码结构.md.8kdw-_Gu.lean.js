import{_ as n,c as a,a2 as p,o as e}from"./chunks/framework.BQmytedh.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/贡献指南/代码结构.md","filePath":"zh/贡献指南/代码结构.md"}'),l={name:"zh/贡献指南/代码结构.md"};function c(t,s,i,r,o,m){return e(),a("div",null,s[0]||(s[0]=[p(`<h2 id="根目录" tabindex="-1">根目录 <a class="header-anchor" href="#根目录" aria-label="Permalink to &quot;根目录&quot;">​</a></h2><p>主要关注： bin、config、docs、makefile、scripts、src、tests 这几个文件和目录.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── Cargo.lock</span></span>
<span class="line"><span>├── Cargo.toml</span></span>
<span class="line"><span>├── LICENSE</span></span>
<span class="line"><span>├── README.md</span></span>
<span class="line"><span>├── benches  # 存放压测相关文件的目录</span></span>
<span class="line"><span>├── bin # 存放启动服务的脚本文件的目录</span></span>
<span class="line"><span>├── build.rs # Cargo 的build.rs文件</span></span>
<span class="line"><span>├── config # 存放项目配置的目录</span></span>
<span class="line"><span>├── docs # 存放文档目录</span></span>
<span class="line"><span>├── example # 存放代码示例的目录</span></span>
<span class="line"><span>├── makefile # 项目的 makefile 文件</span></span>
<span class="line"><span>├── scripts # 存放项目需要的相关脚本文件的目录</span></span>
<span class="line"><span>├── src # 存放 Rust 相关代码的源文件的目录</span></span>
<span class="line"><span>├── target # 编译后生成的文件目录</span></span>
<span class="line"><span>└── tests # 存放项目测试用例相关文件的目录</span></span></code></pre></div><h2 id="src-目录" tabindex="-1">Src 目录 <a class="header-anchor" href="#src-目录" aria-label="Permalink to &quot;Src 目录&quot;">​</a></h2><p>Src 目录主要关注：clients、cmd、common、journal-server、mqtt-bridge、mqtt-broker、placement-center、protocol、storage-adapter目录。</p><p>MQTT协议协议相关代码都在mqtt-bridge，Placement Center代码都在placement-center。其他的都是给这两个模块服务的。</p><p>代码入口在cmd模块中，有mqtt-server、placement-center、journal-server三个模块，分别是三个组件的入口。所以代码可以从这里开始看。</p><p>配置、log相关的通用代码在common/base中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── amqp-broker # AMAP 协议 Broker目录的源文件，暂没启用</span></span>
<span class="line"><span>│   ├── Cargo.toml</span></span>
<span class="line"><span>│   ├── src</span></span>
<span class="line"><span>│   └── tests</span></span>
<span class="line"><span>├── amqp-plugins # AMAP 协议 Broker 插件目录的源文件，暂没启用</span></span>
<span class="line"><span>│   ├── Cargo.toml</span></span>
<span class="line"><span>│   ├── src</span></span>
<span class="line"><span>│   └── tests</span></span>
<span class="line"><span>├── cli-command # RobustMQ 命令行工具cli的源文件，暂没启用</span></span>
<span class="line"><span>│   ├── Cargo.toml</span></span>
<span class="line"><span>│   ├── src</span></span>
<span class="line"><span>│   └── tests</span></span>
<span class="line"><span>├── clients # Placement Center服务的客户端的目录</span></span>
<span class="line"><span>│   ├── Cargo.toml</span></span>
<span class="line"><span>│   ├── src</span></span>
<span class="line"><span>│   └── tests</span></span>
<span class="line"><span>├── cmd # 项目启动的入口</span></span>
<span class="line"><span>│   ├── Cargo.toml</span></span>
<span class="line"><span>│   ├── src</span></span>
<span class="line"><span>│   └── tests</span></span>
<span class="line"><span>├── common # 存放通用代码和模块的目录</span></span>
<span class="line"><span>│   ├── base # 存放通用代码，比如日志、配置，工具类等</span></span>
<span class="line"><span>│   ├── metadata-struct # 存放多个项目都会用到的结构体</span></span>
<span class="line"><span>│   ├── raft-rocksdb # 存放Raft 和RocksDB的通用代码，暂未启用</span></span>
<span class="line"><span>│   ├── rocksdb-engine # 存放RocksDB Engine通用代码，暂未启用</span></span>
<span class="line"><span>│   └── third-driver # 存放三方驱动类，比如MySQL</span></span>
<span class="line"><span>├── journal-remote # Journal数据存放到远程的源文件，暂没启用</span></span>
<span class="line"><span>│   ├── Cargo.toml</span></span>
<span class="line"><span>│   ├── src</span></span>
<span class="line"><span>│   └── tests</span></span>
<span class="line"><span>├── journal-server # Journal Server 项目的代码源文件</span></span>
<span class="line"><span>│   ├── Cargo.toml</span></span>
<span class="line"><span>│   ├── src</span></span>
<span class="line"><span>│   └── tests</span></span>
<span class="line"><span>├── mqtt-bridge # MQTT 桥接功能的代码源文件</span></span>
<span class="line"><span>│   ├── elasticsearch</span></span>
<span class="line"><span>│   ├── kafka</span></span>
<span class="line"><span>│   └── redis</span></span>
<span class="line"><span>├── mqtt-broker # MQTT broker 模块的项目源代码</span></span>
<span class="line"><span>│   ├── Cargo.toml</span></span>
<span class="line"><span>│   ├── src</span></span>
<span class="line"><span>│   └── tests</span></span>
<span class="line"><span>├── placement-center # Placement Center 模块的项目源代码</span></span>
<span class="line"><span>│   ├── Cargo.toml</span></span>
<span class="line"><span>│   ├── src</span></span>
<span class="line"><span>│   └── tests</span></span>
<span class="line"><span>├── protocol # RobustMQ 项目所有协议解析相关的源代码</span></span>
<span class="line"><span>│   ├── Cargo.toml</span></span>
<span class="line"><span>│   ├── src</span></span>
<span class="line"><span>│   └── tests</span></span>
<span class="line"><span>└── storage-adapter # Storage Adapter模块的项目源代码</span></span>
<span class="line"><span>    ├── Cargo.toml</span></span>
<span class="line"><span>    ├── src</span></span>
<span class="line"><span>    └── tests</span></span></code></pre></div>`,9)]))}const b=n(l,[["render",c]]);export{g as __pageData,b as default};
